// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Fusee.Tools.fuseeCmdLine
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class JsilConfig : JsilConfigBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("var jsilConfig = {\r\n\tlibraryRoot: \"./Assets/Scripts/\",\r\n\tmanifestRoot: \"./Assets/" +
                    "Scripts/\",\r\n\tscriptRoot: \"./Assets/Scripts/\",\r\n\t\t\t\r\n\tlocalStorage: true,\r\n\treadO" +
                    "nlyStorage: true,\r\n\tcontentRoot: \"./\",\r\n\r\n\tshowProgressBar: ");
            
            #line 11 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_useProgrBar));
            
            #line default
            #line hidden
            this.Write(",\r\n\tpremultipliedAlpha: ");
            
            #line 12 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_preMultAlpha));
            
            #line default
            #line hidden
            this.Write(",\r\n\r\n\tmanifests: [\r\n\t\t\"");
            
            #line 15 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_fileName));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t");
            
            #line 16 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
 if (_customManifest != "") { 
            
            #line default
            #line hidden
            this.Write("\t\"");
            
            #line 17 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_customManifest));
            
            #line default
            #line hidden
            this.Write("\",\r\n\t");
            
            #line 18 "C:\Users\mch\Documents\_DEV\Fusee\src\Tools\fuseeCmdLine\JsilConfig.tt"
 } 
            
            #line default
            #line hidden
            this.Write("],\r\n\r\n\r\n\tupdateProgressBar: function (prefix, suffix, bytesLoaded, bytesTotal) {\r" +
                    "\n  \t\tvar loadingProgress = document.getElementById(\"loadingProgress\");\r\n  \t\tvar " +
                    "progressBar = document.getElementById(\"progressBar\");\r\n  \t\tvar progressText = do" +
                    "cument.getElementById(\"progressText\");\r\n\r\n\t\tif (LaFuDivContainer == null)\r\n\t\t\tLa" +
                    "FuInsertStartScreen(\"loadingProgress\");\r\n\r\n\t\tvar progress = 0.0;\r\n\t    if (prefi" +
                    "x.startsWith(\"Downloading\"))\r\n\t\t{\r\n\t\t\tprogress = 0.5 * bytesLoaded / bytesTotal;" +
                    "\r\n\t\t}\r\n\t\telse if (prefix.startsWith(\"Loading\"))\r\n\t\t{\r\n\t\t\tprogress = 0.5 + 0.5 * " +
                    "bytesLoaded / bytesTotal;\r\n\t\t}\r\n\t\telse if (prefix.startsWith(\"Starting\"))\r\n\t\t{\r\n" +
                    "\t\t\tprogress = 1;\r\n\t\t}\r\n\t\tif (progress > 1)\r\n\t\t\tprogress = 1;\r\n\t\tif (progress < 0" +
                    ")\r\n\t\t\tprogress = 0;\r\n\t\t\r\n\t\tLaFuSetProgress(progress);\r\n\r\n  \t\tif (loadingProgress" +
                    " && progressBar) {\r\n\t\t\tif (progress == 1)\r\n\t\t\t\tprogressBar.style.transition = \"w" +
                    "idth 0s\";\r\n\t\t\tprogressBar.style.width = (progress * loadingProgress.clientWidth)" +
                    ".toString() + \"px\";\r\n\t\t}\r\n\r\n  \t\tif (progressText) {\r\n    \t\tvar progressString;\r\n" +
                    "\r\n   \t\t\tif (suffix === null) {\r\n     \t\t\t\tprogressString = prefix;\r\n    \t\t\t} else" +
                    " {\r\n      \t\t\t\tprogressString = prefix + Math.floor(bytesLoaded) + suffix + \" / \"" +
                    " + Math.floor(bytesTotal) + suffix;\r\n    \t\t\t}\r\n\r\n    \t\t\tif (jsilConfig.formatPro" +
                    "gressText)\r\n      \t\t\t\tprogressString = jsilConfig.formatProgressText(prefix, suf" +
                    "fix, bytesLoaded, bytesTotal, progressString);\r\n\r\n    \t\t\tprogressText.textConten" +
                    "t = progressString;\r\n    \t\t\tprogressText.style.left = ((loadingProgress.clientWi" +
                    "dth - progressText.clientWidth) / 2).toString() + \"px\";\r\n    \t\t\tprogressText.sty" +
                    "le.top = ((loadingProgress.clientHeight - progressText.clientHeight) * 0.75 ).to" +
                    "String() + \"px\";\r\n  \t\t}\r\n\t}\r\n};\r\n\r\n//// Startanimation helpers\r\n\r\nvar LaFuDivCon" +
                    "tainer = null;\r\nvar LaFuProgressState = 0;\r\nvar LaFuAnimStartTime = 0.0;\r\nvar La" +
                    "FuAnimDuration = 500.0;\r\nvar LaFuTextMessages = [\"LOADING\", \"INITIALIZING\", \"MAD" +
                    "E WITH\"]\r\nvar LaFuProgressSteps = [0.5, 0.66, 10 ];\r\nvar LaFuNextThreshold = 0;\r" +
                    "\n// Preload the rocket animation\r\nvar rocketAnimImg = new Image();\r\nrocketAnimIm" +
                    "g.src = \"Assets/FuseeAnim.gif\";\r\n\r\nfunction LaFuInitAnim() {\r\n\tLaFuAnimStartTime" +
                    " = window.performance.now();\r\n}\r\n\r\nfunction LaFuStartRocket(){\r\n\tdocument.getEle" +
                    "mentById(\"LaFuProgressText\").style.opacity = 0;\r\n\tanimTime = window.performance." +
                    "now()-LaFuAnimStartTime;\r\n\trestTime = LaFuAnimDuration - animTime % LaFuAnimDura" +
                    "tion;\r\n\twindow.setTimeout(LaFuDoChangeImage, restTime);\r\n}\r\n\r\nfunction LaFuDoCha" +
                    "ngeImage() {\r\n\tLaFuNextText(2400);\r\n\twindow.setTimeout(LaFuShowFuseeText, 2400);" +
                    "\r\n\tdocument.getElementById(\"LaFusee\").src = \"Assets/FuseeAnim.gif\";\r\n}\r\n\r\nfuncti" +
                    "on LaFuShowFuseeText (){\r\n\tdocument.getElementById(\"LaFuseeTxt\").style.opacity =" +
                    " 1.0;\r\n}\r\n\r\nfunction LaFuNextText(timeout) {\r\n\tLaFuProgressState++;\r\n\tif (LaFuPr" +
                    "ogressState >= LaFuTextMessages.length)\r\n\t\tLaFuProgressState = LaFuTextMessages." +
                    "length-1;\r\n\tdocument.getElementById(\"LaFuProgressText\").style.opacity = 0;\r\n\twin" +
                    "dow.setTimeout(LaFuDoChangeText, timeout);\r\n}\r\n\r\nfunction LaFuDoChangeText() {\r\n" +
                    "\tdocument.getElementById(\"LaFuProgressText\").innerText = LaFuTextMessages[LaFuPr" +
                    "ogressState];\r\n\tdocument.getElementById(\"LaFuProgressText\").style.opacity = 1;\r\n" +
                    "}\r\n\r\nfunction LaFuSetProgress(progress)\r\n{\r\n\tif (progress > LaFuProgressSteps[La" +
                    "FuNextThreshold])\r\n\t{\r\n\t\tLaFuAdvanceProgress();\r\n\t\tLaFuNextThreshold++;\r\n\t\tif (L" +
                    "aFuNextThreshold >= LaFuProgressSteps.length)\r\n\t\t\tLaFuNextThreshold = LaFuProgre" +
                    "ssSteps.length-1;\r\n\t}\r\n}\r\n\r\nfunction LaFuAdvanceProgress() {\r\n\tswitch (LaFuProgr" +
                    "essState)\r\n\t{\r\n\t\tcase 0:\r\n\t\t\tLaFuNextText(500);\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tLaFuSt" +
                    "artRocket();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction LaFuInsertStartScreen(someElementId) " +
                    "{\r\n\tLaFuDivContainer = document.getElementById(someElementId);\r\n\tLaFuDivContaine" +
                    "r.innerHTML += \"\\\r\n\t<img id=\\\"LaFusee\\\" \\\r\n\t\tstyle=\\\"position:absolute; top:50%;" +
                    " left:50%; margin-left:-57px; margin-top:-96px\\\" \\\r\n\t\tsrc=\\\"Assets/FuseeSpinning" +
                    ".gif\\\" onload=\\\"LaFuInitAnim()\\\"/> \\\r\n\t<img id=\\\"LaFuseeTxt\\\" \\\r\n\t\tstyle=\\\"opaci" +
                    "ty: 0.0; transition: opacity 1s; position:absolute; top:50%; left:50%; margin-le" +
                    "ft:-89px; margin-top:93px\\\" \\\r\n\t\tsrc=\\\"Assets/FuseeText.png\\\"/> \\\r\n\t<div style=\\" +
                    "\"position:absolute; top:50%; left:50%; width:300px; margin-left:-150px; margin-t" +
                    "op:-143px\\\" > \\\r\n\t\t<p id=\\\"LaFuProgressText\\\" style=\\\"text-align:center; font:30" +
                    "px \'Open Sans\', sans-serif; font-weight:bold; color:#708090; transition: opacity" +
                    " 0.5s\\\">LOADING</p></div> \";\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class JsilConfigBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
